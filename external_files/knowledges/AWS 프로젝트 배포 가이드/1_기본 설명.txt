[기본 설명]
- 본 설명글은 AWS 클라우스 서비스를 사용하여 본 프로젝트를 기반으로 개발한 서버 프로젝트를
    배포하여 네트워크에 오픈하는 일련의 작업에 대한 처리 방식과 노하우를 정리한 글입니다.

- 아키텍쳐 설명 :
    앞으로 구현하게 될, 서버 개발 및 배포에 필요한 필수 아키텍쳐에 대해 설명합니다.

    1. 로컬 환경 :
        로컬 환경은 Springboot 를 개발하기 위해 필요한 환경을 자유롭게 구성하면 됩니다.
        참고로 도커를 사용하여 배포를 할 것이므로 도커도 설치해둡시다.
        도커를 사용하면 좋은 이유는, 개발시 환경과 배포시 환경간의 차이를 고려하지 않아도 된다는 것으로,
        로컬 환경에서의 테스트가 실제 배포환경 에서의 테스트 결과와 다른 상황을 방지하며,
        파일 하나로 서비스 배포가 가능하다는 장점을 가지고 있습니다.

    2. 개발 데이터베이스 & 배포 데이터베이스 :
        개발 시점에 사용할 테스트용 데이터베이스와
        배포 시점에 사용될 배포용 데이터베이스를 준비해야 합니다.
        이것을 분리시켜야 추후 다음 버전 개발시에 현재 실제 사용중인 데이터를 건드리지 않고 안전하게 개발을 진행할 수 있습니다.

    3. 개발 서버 & 배포 서버 :
        개발 시점에 사용할 테스트 서버와,
        배포 시점에 사용될 배포 서버를 각각 준비합니다.
        앞서 설명했듯, 이렇게 분리를 시켜야 안정적인 서비스 제공이 가능합니다.
        개발 서버의 컴퓨터는 따로 준비할 필요없이, 배포 서버에 포트만 다르게 하여 실행시켜도 좋습니다.

    4. 젠킨스 :
        만약 내가 서버를 올려둔 상태로, 코드를 수정하여 다시 배포를 해야한다고 가정하면,

        수정된 프로젝트를 테스트 -> 해당 테스트를 빌드 ->
        배포할 서버에 접속 -> 빌드된 파일을 받아오기 ->
        현재 배포중인 서버 프로그램을 종료 -> 빌드 파일 로딩

        위와 같은 일련의 과정을 수행해야 합니다.

        이러한 과정을 직접 처리할 것 없이 Git 브랜치에 push 를 하면 자동으로 수행해준다고 한다면 무척 편할 것입니다.

        이러한 기능이 바로 CI/CD 라고 하며, 대표적인 툴이 젠킨스입니다.
        모니터링 서비스와 같이 개발자만 사용하는 툴이므로, 두 서비스는 동일 컴퓨터 환경에서 포트만 다르게 하여 실행시켜도 좋습니다.

    5. 모니터링 툴 :
        배포중인 서버의 현 상태를 편하게 확인할 때 사용되는 서비스 역시 만들 것입니다.

- 진행 준비 :
    서비스 배포를 위한 클라우드 서비스는 AWS 를 사용할 것입니다.

    AWS EC2 를 사용하여 젠킨스, 모니터링 시스템, 개발 및 배포 서버를 동작시켜 네트워크 상에 오픈할 것이고,
    AWS RDS 를 사용하여 개발 서버 / 배포 서버 용 데이터베이스를 구성할 것이며,
    AWS S3 를 사용하여 파일 저장 및 배포를 할 것입니다.

    즉, AWS 계정이 필요합니다.

    젠킨스의 배포 로직을 실행시키는 트리거는, Git 의 특정 브랜치에 수정된 코드를 push 하는 것으로 할 것이므로,
    Git 계정 역시 필요하며,

    배포시에는 도커를 사용할 것이므로 도커를 설치해주세요.

    마지막으로, 배포할 대상이 되는 Springboot 프로젝트가 로컬에서 개발 가능 상태로 존재하며,
    Git 레포지토리에 올라온 상태면 준비 완료입니다.