[젠킨스 자동화]
- 앞서 서비스 서버 배포까지 완료하였습니다.
    그런데, 수정사항이 있을 때마다 처리하기에는 번거로운 프로세스입니다.
    이번에는 젠킨스를 사용하여, Git 에 Push 를 올릴 때마다 자동으로 빌드 및 배포가 이루어지도록 할 것입니다.

- AWS EC2 준비하기
    1. AWS 콘솔에서 EC2 항목으로 이동한 후,
        developer-tools
        라는 인스턴스를 만들어줄 것입니다.
        이 인스턴스에는 CI/CD 툴, 모니터링 툴 등의 개발자에게 필요한 서비스를 올려놓을 용도입니다.

        인스턴스 시작 버튼을 누르고,
        이름은 developer-tools, 이미지는 ubuntu Ubuntu Server 24.04 LTS (HVM), SSD Volume Type,
        인스턴스 유형은 t2.small(이정도는 되어야 젠킨스를 돌릴 수 있음), 키페어는 가이드 3번 글에서 만든 키페어를 선택하고,
        보안그룹 생성, 스토리지 구성은 30GiB 범용 SSD gp3

        위와 같이 생성합니다.

    2. 네트워크 및 보안 탭에 탄력적 IP 를 누릅니다.
        탄력적 IP 주소 할당을 누르고,
        태그에 Name 키에 인스턴스 이름과 동일한 값으로 하여 탄력적 IP 를 할당합니다.
        생성된 IP 를 선택하고, 작업 - 탄력적 IP 주소 연결 을 누르고, 앞서 생성한 인스턴스와 연결해줍니다.
        이 작업을 해주는 이유는, EC2 인스턴스의 경우는 중단되었다가 다시 실행되면 그때마다 IP 가 새로 할당됩니다.
        이렇게 IP 가 변경되는 것을 막기 위하여 탄력적 IP 로 미리 IP 를 할당받았다가,
        인스턴스에 연결하는 방식으로 IP 변동을 막는 것입니다.
        즉, 탄력적 IP 의 IP 주소가 앞으로 해당 인스턴스의 IP 가 되는 것입니다.
        주의할 점으로는, 탄력적 IP 는 생성할 수 있는 개수가 한정되어 있습니다.
        한정 수량을 넘어가면 검색해서 AWS 에 요청하는 방법을 찾아보면 되고,
        탄력적 IP 는 만약 현재 실행중인 인스턴스에 할당되지 않은 상태로 존재한다면,
        그 자체로 유지비용의 요금이 발생합니다.

    3. 접속 보안 설정
        본 인스턴스는 말 그대로 개발자만 접속이 가능해야 하는 서버로,
        SSH 포트인 22 번 포트와, 각 개발자 툴 서비스 포트를 개발자 위치에만 공개해 두어야 합니다.

        보안 그룹 - 인바운드 규칙 - 인바운드 규칙 편집

        으로 이동하고,

        앞서 가이드 5번 글에서 했던대로, 허용할 포트와 ip 를 설정할 때,
        SSH 의 22 번 포트와,
        젠킨스 포트로 사용할 8081 포트를 현재 내 ip 에만 설정하고,
        추후에 접속 위치가 바뀔 때마다 수정하도록 합시다.

    4. OpenSSH 접속 및 기본 설정
        커맨드창을 열고,

        >> chmod 400 **(EC2 SSH 키페어 이름)**.pem

        를 입력해주고,

        >> ssh -i "**(EC2 SSH 키페어 이름)**.pem" ubuntu@1.1.1.1
        위와 같이 명령어를 입력합니다.

        접속 명령어 뒤의 ubuntu@1.1.1.1 부분은 연결할 유저명과 접속하려는 ip 주소를 입력하면 됩니다.
        ip주소는 앞서 각 인스턴스와 연결한 탄력적 ip를 사용하면 됩니다.
        유저명은 OS 별로 다른데,
        https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesConnecting.html#TroubleshootingInstancesConnectingPuTTY
        에서 참고하면 됩니다.

        먼저, 커맨드창 이름을 보기 쉽게 만들기 위해
        >> sudo hostnamectl set-hostname {인스턴스명}
        를 입력합니다.
        커맨드라인 별명을 적용을 시키려면 sudo reboot 를 사용해서 재부팅을 시키고 다시 접속하면 됩니다.

        그리고 EC2 시간을 기본인 UTC 에서 한국시간 KST로 바꿉니다.

        >> sudo rm /etc/localtime
        >> sudo ln -s /usr/share/zoneinfo/Asia/Seoul /etc/localtime

        >> date
        를 입력해서 KST 시간이 나온되면 된 것입니다.

        >> sudo apt-get update
        >> sudo apt-get upgrade

        서버 가상 Ram 증가 :
        AWS 프리티어 인스턴스의 경우는 Ram 이 작아서 하드디스크 영역을 가상램으로 할당해서 임시로 램을 늘립니다.
        상대적으로 부족한 램 크기를 상대적으로 풍족한 롬 크기로 보완하는 것입니다.

        >> df -h
        로 하드디스크 용량 확인

        >> free
        로 메모리 swap 메모리 용량 확인

        >> sudo fallocate -l 8G /swapfile
        스왑 메모리 설정

        >> sudo chmod 600 /swapfile
        >> sudo mkswap /swapfile
        >> sudo swapon /swapfile

        재부팅시에도 유지하기 위해,
        >> sudo nano /etc/fstab
        를 열고,

        /swapfile swap swap defaults 0 0

        를 추가

        성공여부 확인
        >> free
        로 swap 영역확인

        >> sudo reboot
        재부팅 후 다시 접속하여

        >> free
        로 swap 영역확인

        도커 설치에 필요한 패키지 설치
        >> sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common

        도커 공식 GPG 키 추가
        >> curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

        도커 공식 apt 저장소 추가
        >> sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

        시스템 패키지 업데이트
        >> sudo apt-get update

        도커 설치
        >> sudo apt-get install docker-ce docker-ce-cli containerd.io

        도커 실행 상태 확인
        >> sudo systemctl status docker

- 젠킨스 준비
    1. 앞서 EC2 developer-tools 서버를 만들었으니,
        해당 서버에서 포트 번호 8081 로 실행시키겠습니다.

    2. SSH 로 서버에 접속후,
        >> sudo docker run -itd --name jenkins_container -p 8081:8080 -v /var/run/docker.sock:/var/run/docker.sock -v ~/Desktop/jenkins_home:/var/jenkins_home -u root jenkins/jenkins:lts
        이것을 입력하기만 하면 젠킨스 설치는 끝입니다.

        젠킨스 컨테이너 안에서도 도커 사용이 필요하므로,

        -v /var/run/docker.sock:/var/run/docker.sock

        이 옵션을 사용한 것인데,
        도커 안 도커 설정을 마치기 위하여,

        >> sudo docker container exec -it jenkins_container sh

        명령어로 젠킨스 컨테이너 안에 들어가서,

        >> apt-get update && apt-get -y install apt-transport-https ca-certificates curl gnupg2 software-properties-common && curl -fsSL https://download.docker.com/linux/$(. /etc/os-release; echo "$ID")/gpg > /tmp/dkey; apt-key add /tmp/dkey && add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/$(. /etc/os-release; echo "$ID") $(lsb_release -cs) stable" && apt-get update && apt-get -y install docker-ce

        위 명령어를 입력하여 도커를 설치한 후,

        >> docker ps

        를 하여 에러 없이 동작하면 도커 안에 도커가 설치된 것입니다. (정확히는 컨테이너 외부의 도커를 사용 가능하게 된 것입니다.)

        >> exit

        를 하여 도커 컨테이너 안에서 빠져나오고,

        서버 보안 관리의 인바운드 설정에서 8081 포트에 접속 가능하게 열어주고,
        해당 포트로 접속하여 젠킨스가 실행되는지 확인하세요.

    3. 접속이 잘 되는 것을 확인하였다면,
        젠킨스 화면에
        please copy the password from either location and paste it below
        라고, 비밀번호를 입력하라고 하는데,
        이 비밀번호는,
        앞서 -v 옵션으로 만들어진 ~/Desktop 폴더 안에 있는데,
        >> sudo cat ~/Desktop/jenkins_home/secrets/initialAdminPassword
        위 명령어로 조회를 하면 비밀번호가 나오니 이것을 입력하면 됩니다.

        다음으로 나오는 화면에서 Install suggested plugins 를 눌러 기본 플러그인을 설치하고,
        접속시 사용할 아이디와 비밀번호를 입력하면 초기 세팅이 끝납니다.

    4. 여기까지 하여, 정보를 문서화하겠습니다.
        가이드 3번 글에서 만든 ServerInfo 폴더 안에,
        "AWS EC2 developer-tools.txt" 파일을 만들고,
        이 안에,


        [developer-tools]
        - 이 EC2 서버는 개발자 툴을 위한 서버입니다.

        키페어 파일 : developer.pem
        OS : Ubuntu Server 24.04 LTS (HVM) - (t2.small)
        접속 ip :
        Vpc :
        프라이빗 IP :
        OpenSSH 접속 명령어 : ssh -i "developer.pem" ubuntu@

        (Jenkins)
        포트 : 8081
        admin pw :
        user id :
        user pw :


        위와 같은 형식으로 Jenkins 정보를 추가하면 됩니다.

    5. 젠킨스 기본 준비에 대하여, 한가지 더 처리하겠습니다.
        jenkins 를 실행하면 Desktop 디렉토리가 생성되는데,
        이 안에 jenkins_home 디렉토리가 있습니다.
        이 안에 ssh_keys 라는 디렉토리를
        >> sudo mkdir ssh_keys
        명령어로 생성하고,

        pem 키 파일이 존재하는 로컬 커맨드창에서,
        >> scp -i "{pem 키 파일}" "{pem 키 파일}" {아이디@전송할 서버주소}:/home/ubuntu
        로 이동시키고,

        다시 jenkins 커맨드에서
        >> sudo mv /home/ubuntu/{pem 키 파일} /home/ubuntu/Desktop/jenkins_home/ssh_keys
        이렇게 이동시키세요.

        이 파일로 젠킨스가 다른 서버에 SSH 명령어를 날릴 것입니다.

    6. 이제 준비된 젠킨스로 자동화 로직을 구현할 것입니다.
        기능 설계부터 하겠습니다.

        1. 로컬에서 프로젝트를 수정하다가, Git 레포지토리의 dev 브랜치에 push 를 올립니다.
        2. 이를 신호로 하여 젠킨스가 해당 git 레포지토리의 dev 브랜치에서 프로젝트를 pull 해 옵니다.
        3. 프로젝트의 external_files 의 개발 서버 빌드 방법의 순서에 따라 테스트를 진행합니다.
        4. 이상이 없다면 생성된 server_dev.tar 파일을 배포할 서버로 전달합니다.
        5. 해당 서버의 ssh 에 접속하여 도커 명령어로 기존의 server_dev 컨테이너를 내리고 기존 이미지도 제거합니다.
        6. 도커 명령어로, 앞서 받은 server_dev.tar 이미지 파일을 로딩한 후 실행시킵니다.

        위와 같은 작업을 수행하도록 하는 것이 목표입니다.

        Git 의 경우, 저는 프로젝트가 Gitlab 에 저장되어있다고 가정하고 설명하겠습니다.

    7. 젠킨스 플러그인 설치를 합니다.
        메인 페이지의 왼쪽 메뉴바에서 Jenkins 관리를 클릭합니다.
        System Configuration 에서 플러그인 관리를 클릭합니다.
        설치가능탭을 클릭하시고 아래의 플러그인들을 설치합니다.

        설치할 플러그인 목록

        github integration : github의 webhook 을 사용하기 위한 플러그인
        post build task : 빌드 로그를 판단하여’ script 혹은 shell 을 실행할 수 있게 하는 플러그인
        publish over ssh : 다른 EC2에 접속하여 작업을 가능하게 해주는 플러그인
        Gitlab : 깃랩 계정 사용 플러그인

        설치후 재시작을합니다.

        재시작시에는 도커 컨테이너가 종료되므로,
        >> sudo docker start jenkins_container

        위 명령어로 컨테이너를 재실행시키면 됩니다.

    8. Jenkins 관리에서 System 을 누릅니다.
        of executors 를 2에서 1로 바꿔줍니다.
        한번에 작업할 개수인데, 젠킨스가 의외로 성능을 많이 잡아먹으므로 프리징 되지 않도록, 한번에 하나씩 빌드 작업을 수행하도록 설정한 것입니다.

        Gitlab 부분에서,
        connection name 에는 해당 gitlab 접속 정보의 이름을 넣고,
        gitlab host url 에는,

        https://gitlab.com/

        위 주소를 입력합니다.

        credentials 에는 인증 정보를 넣어야 하는데,
        먼저 gitlab access token, 즉 외부에서 gitlab 에 명령을 내릴때 필요한 토큰을 발급받도록 하겠습니다.

        깃랩 홈페이지로 이동해 로그인한 후,
        프로필을 누르고, preferences 를 누릅니다.
        그리고 Access Tokens 탭을 누르면, Personal Access Tokens 화면이 나오는데,
        여기서 add new token 을 누르고,
        토큰 이름을 jenkins, expiration date 를 원하는 만료 일자로 하고,
        scopes 를 모두 선택한 후 토큰을 생성한 후, 해당 토큰을 복사해주세요.

        다시 젠킨스 설정으로 돌아와서, Credentials 에서 add 를 누르고,
        kind 에 gitlab api token 을 선택한 후,
        api token 부분에 앞서 복사한 토큰을 붙여넣어서 add 를 누르면 인증 정보가 저장이 되는데,
        다시 credentials 부분에서 이번에 생성한 인증 정보를 선택하면 에러가 사라집니다.

        test connection 버튼을 눌러서 success 가 나오는 것까지 확인하면 됩니다.

        다음으로는 SSH Servers 접속 세팅 (젠킨스에서 배포 서버에 SSH 접속을 하기위한 설정) 을 하겠습니다.
        방금 화면에서 그대로 맨 아래로 내려오면 Publish over SSH 항목이 있는데, 여기서 SSH Server 탭을 확인할 수 있고, 추가 버튼을 눌러서 작성합니다.

        Name : Job에 표시될 이름(server_dev 처럼 인스턴스 명을 입력하면 됩니다.)
        ex) server_dev

        Hostname : 배포 EC2 인스턴스의 탄력적 IP를 작성하시면 됩니다.
            동일 VPN 내의 데이터베이스인 경우에는,
            외부에서 접근하기 위한 퍼블릭 IP 를 허용하는 것이 아니라,
            내부의 프라이빗 IP 를 허용해야 하는 것을 주의하세요.
        ex) 1.1.1.1

        Username : ssh 접근 계정. ubuntu 라고 적으면 됩니다.

        Remote Directory : SSH 처음 진입 디렉토리
        비어두기

        하단에 고급버튼을 클릭하고 Use password authentication, or user a different key를 클릭하고 Key를 작성합니다.
        여기서 Key는 운영용 EC2로 접속할 때 사용하는 Pem키 파일 속 내용입니다.

        Key 확인 방법
        cat 명령어로 키 파일을 열면 됩니다.
        >> cat 키위치
        ex) cat Test.pem


        -----BEGIN RSA PRIVATE KEY-----
        MIIEogIBAAKCAQEAhWQntXZt45g94XuFjA8hgPbpVo3u2lSIjHo9OVhKwPfnRpmJ
        jJtE8Vn3/hG0HqpbQAXSf9p19oVhyO41ZNwThsAk7Aar4GH8y00eIwSWRja7WOsS
        F5EIrNdeBcFzgq3pxqHArNnytCQNyXfawIsLK9899gRzrCPIo4P7Lsq07MUJGSJY
        ....
        Nw95AoGAVzS7uG/dC+LjmATPUNWSq5U8HZJVfc3k7UDU+6jRUpuMapuhqTyYiGNG
        OOm3GCIJFVnKKbUXTlUdlCCyO95kAh2Y8KRLg43Xknu/iAzW4SCwjVIFFB0SLjyO
        8DJrOE+1sMVHN6PZ9Fl2VVFxaK4grHfFBpe9YyjqmlWeYBkDYgU=
        -----END RSA PRIVATE KEY-----


        위와같이 출력된 키 전체를 복사해서 Key 항목에 붙여넣어주면 됩니다.

        이 과정은 Jenkins EC2가 ssh키(pem키)를 가지고 배포 EC2에 접근할수 있도록 하는 것입니다.

        Test Configuration을 클릭하여 연결을 확인합니다.

        배포 서버에서 젠킨스 아이피(같은 VPC 라면 private ip)를 허용한 상태여야 하는 것을 주의합시다.

        System 설정은 끝났으니, 하단에 저장 버튼을 눌러줍시다.

    9. Jenkins관리 -> Tools 를 클릭합니다.
        Gradle installations 항목을 설정할 것인데,
        프로젝트 빌드 테스트에 사용할 Gradle 버전을 정해두는 것입니다.
        Add Gradle 버튼을 누르고,
        name 에는 프로젝트의 Gradle 버전명을 입력하고,
        version 에서 종류를 선택하면 됩니다.

        프로젝트의 gradle 버전은,
        gradle/wrapper/gradle-wrapper.properties의 distributionUrl 항목을 통해 알수 있습니다.

        또한, 서로 다른 JDK 를 사용하는 프로젝트를 위하여 JDK 툴의 버전 설정도 해야하는데,

        제 프로젝트는 jdk 21 을 사용하므로,
        jdk installations 에 add jdk 를 누르고,
        Name 은 jdk21,
        install automatically 를 체크한 상태로,
        아래에는 extract *.zip/*.tar.gz 항목만을 남기고,

        Download URL for binary archive 에는
        https://corretto.aws/downloads/latest/amazon-corretto-21-x64-linux-jdk.tar.gz

        Subdirectory of extracted archive 에는
        amazon-corretto-21.0.3.9.1-linux-x64

        를 설정합니다.

        추가로, 자주 사용되는 LTS 버전인 17 버전도 추가하기 위해, Add jdk 를 다시 누르고,
        Name 은 jdk17,
        install automatically 를 체크한 상태로,
        아래에는 extract *.zip/*.tar.gz 항목만을 남기고,

        Download URL for binary archive 에는
        https://corretto.aws/downloads/latest/amazon-corretto-17-x64-linux-jdk.tar.gz

        Subdirectory of extracted archive 에는
        amazon-corretto-17.0.8.8.1-linux-x64

        를 설정합니다.

        설정하였으면 Save 버튼을 누르면 됩니다.

- 개발 서버 빌드 아이템 설정
    1. 이제 본격적으로, 타겟 깃허브 프로젝트에 대한 CI/CD 처리를 젠킨스에서 처리하도록 설정할 것입니다.
        먼저 개발 프로젝트의 빌드 작업을 처리하는 아이템을 추가할 것으로,
        젠킨스 메인에서 새로운 Item 을 누르세요.

        아이템 이름은 메인 화면에서 표시될 이름으로,
        server_dev 이런식으로 적어서 개발 서버에 대한 빌드 작업이라고 표시하면 됩니다.
        그리고 Freestyle project 를 누르고 OK 를 누르세요.

        이러면 빌드 작업 아이템이 생성된 것입니다.
        개발 빌드용 빌드 아이템 생성 후, 하나씩 기능을 구현해나갈 것입니다.

    2. General 에 Gitlab connection 에는 앞서 생성한 깃랩 설정이 선택되어 있을 것입니다.

        아래로 가서,
        앞서 JDK 버전을 2개 이상 등록했다면 나타나는 JDK 항목에서 프로젝트와 동일한 jdk 버전을 선택하고,
        소스코드 관리에서 Git 을 누르고, Repository URL 에, 본인의 레포지토리의 clone with https 주소를 넣어주세요.
        프라이빗 레포지토리라면, 액세스 불가라는 에러가 날 것인데,

        Credentials 에서 Add 를 눌러,
        kind : username with password
        username : github nickname(깃랩에서 프로필을 누르고 나온 아이디 중 @ 뒤에 오는 아이디)
        password : 앞서 발급받은 access token
        위와 같이 입력하고 Add 한 후, 생성된 계정 정보를 선택하면 에러가 사라질 것입니다.

        branch to build 에 branch specifier 에는 */dev 라고 하여,
        dev 브랜치에 오는 이벤트만 관여하겠다고 설정함으로써,
        추후 다른 브랜치가 아니라 dev 브랜치에 push 가 오면 개발 서버 빌드를 하도록 처리할 것입니다.

        빌드 유발에는 Build when a change is pushed to Gitlab... 을 선택해서,
        깃랩 프로젝트에 push 되면 webhook 이 발생하는 시점에 작업이 실행되도록 설정합니다.

        이 항목을 누르면 나오는 아래 정보에서,
        enabled gitlab triggers 는 push events 를 제외하고는 모두 체크 해제하고,
        고급 버튼을 눌러,
        아래의 Secret Token 에서, Generate 버튼을 누르면 웹훅용 시크릿 토큰이 나오는데,
        일단 메모장에 복사해주세요.

        일단 여기까지만 하고 저장을 누릅니다.

    3. 깃허브 프로젝트의 웹훅을 설정합니다.
        Jenkins와 web hook으로 연결하고 싶은 프로젝트의 깃랩 레포지토리에 들어가서,
        settings 의 webhooks 탭에 들어가,
        add new webhook 을 누릅니다.
        URL 에는
        {젠킨스 접속 주소 및 포트번호}/project/{아이템 이름}
        이런 형식으로 입력하고,
        name 에는 아이템 이름과 동일하게 입력하고,
        secret token 에는 앞서 복사해둔 웹훅 시크릿 토큰을 붙여넣어줍니다.

        trigger 는 push events 를 누르고, wildcard pattern 에 dev 를 입력해서,
        dev 브랜치에 push 가 왔을 때만 웹훅을 실행하도록 설정합니다.
        Add Webhook 을 한 후, test 를 하면 되는데,

        여기서, 젠킨스 서버의 인바운드에서 webhook 신호를 보내는 gitlab ip 를 차단중이기에,
        EC2 보안 설정에서 Gitlab ip 를 허용해야 합니다.

        https://docs.gitlab.com/ee/user/gitlab_com/#gitlabcom-ip-addresses

        위 링크에서 IP range 를 확인하세요.
        지금은 34.74.90.64/28 와 34.74.226.0/24 를 허용했습니다.

        IP 허용 후 test 를 눌렀을 때, 이상이 없으며, 젠킨스로 이동했을 때, 해당 아이템이 작업이 진행되면 됩니다.

        아직 dev 브랜치가 없으므로, 에러 표시가 뜰 것이지만, 어쨌든 아이템이 실행되었다가 바로 종료되는 것을 확인했다면,
        앞으로 해당 프로젝트의 dev 서버에 push 를 올리면 작업이 실행될 것입니다.

        이를 확인하기 위하여, 준비된 프로젝트에서 작은 변경을 준 후, dev 브랜치에 push 를 해보세요.
        작업 실행이 잘 이루어졌다면 앞으로 각 브랜치에 push 를 하는 것만으로 빌드 작업이 이루어지는 것입니다.

    4. 트리거 작업을 완료했습니다.
        이제 테스트 및 빌드 작업을 자동화할 것입니다.

        먼저, 프로젝트 빌드 테스트시 필요하므로 데이터베이스 보안 설정에서 인바운드 설정에 젠킨스 접근이 가능하도록 설정해주세요.

        동일 VPN 내의 데이터베이스인 경우에는,
        외부에서 접근하기 위한 퍼블릭 IP 를 허용하는 것이 아니라,
        내부의 프라이빗 IP 를 허용하는 것을 주의하세요.

        동일하게 서버 인스턴스에서 22 번 포트 역시 젠킨스 접근이 가능하도록 오픈해주세요.

        Build Steps 에 Add build step 을 누르고, Execute shell 을 누릅니다.
        Build Steps 는 트리거가 발동하여 빌드가 진행될 때 어떤 작업을 수행할지에 대한 설정을 하는 곳으로,
        위에서부터 아래로 순서대로 작업이 수행됩니다.
        Execute shell 은, jenkins 가 실행되는 OS 의 커맨드창에 명령어를 내리는 것으로,
        이 안에 명령어를 한줄씩 써나가면 해당 명령어가 실행되는 것입니다.

        chmod +x ./gradlew
        ./gradlew build
        docker image build --pull=true -f "./external_files/docker/server_docker/Dockerfile-Server-Dev" -t raillylinker/server_dev:latest .
        docker save -o "./external_files/docker/server_docker/server_dev.tar" raillylinker/server_dev:latest
        docker image prune -af
        scp -o "StrictHostKeyChecking=no" -i /var/jenkins_home/ssh_keys/petlogon-developer.pem ./external_files/docker/server_docker/server_dev.tar ubuntu@{서버주소}:/home/ubuntu/dev
        rm ./external_files/docker/server_docker/server_dev.tar

        위와 같이 입력해주세요.

        설명하자면,
        첫번째, 두번째 줄은, Springboot 프로젝트를 빌드해서 jar 파일을 만드는 것이고,
        세번째 줄은, external_files/docker/server_docker 안의 도커 파일로 도커 이미지 빌드를 하는 것이며,
        네번째 줄은, 이미지를 파일로 저장하는 것이고,
        다섯번째 줄은, 도커 이미지를 제거하는 것이고,
        마지막 줄은, 만들어진 도커 이미지를, 배포올릴 서비스 서버에 전달하는 것입니다.
        {서버주소} 부분은 앞서 설명하였듯, 같은 VPC 내라면 프라이빗 IP 를 적어야 하는 것을 주의합시다.

        이렇게 하면 Jenkins 로컬 부분에서 Springboot test / build 가 완료된 것이고,
        이렇게 생성된 도커 이미지 파일을 서비스 서버에 전달한 것입니다.

        이제 이 파일을 서비스 서버 내에서 실행시키도록 하면 됩니다.

    5. jenkins 에서 서비스 서버에 명령을 내리려면 SSH 를 사용해야 합니다.

        빌드 후 조치를 선택하고 send build artifacts over SSH를 선택합니다.

        SSH Server 는 앞서 작성했던 배포 서버의 SSH 정보를 선택하고,

        Exec Command 에,

        sudo docker container stop server_dev
        sudo docker image prune -af
        sudo docker load -i /home/ubuntu/dev/server_dev.tar
        sudo docker container run -v /home/ubuntu/dev/by_product_files:/app/by_product_files -d -e TZ=Asia/Seoul --rm -p8080:8080 --name server_dev raillylinker/server_dev:latest

        이렇게 입력하고

        저장 버튼을 누르면 젠킨스 설정 완료입니다.

- 배포 서버 빌드 아이템 설정
    1. 마지막으로, 배포 프로젝트의 빌드 작업을 처리하는 아이템을 추가할 것입니다.
        젠킨스 메인에서 새로운 Item 을 누르세요.

        아이템 이름은 메인 화면에서 표시될 이름으로,
        server_prod 이런식으로 적어서 개발 서버에 대한 빌드 작업이라고 표시하면 됩니다.
        그리고 Freestyle project 를 누르고 OK 를 누르세요.

        이러면 빌드 작업 아이템이 생성된 것입니다.
        개발 빌드용 빌드 아이템 생성 후, 하나씩 기능을 구현해나갈 것입니다.

    2. General 에 Gitlab connection 에는 앞서 생성한 깃랩 설정이 선택되어 있을 것입니다.

        아래로 가서,
        앞서 JDK 버전을 2개 이상 등록했다면 나타나는 JDK 항목에서 프로젝트와 동일한 jdk 버전을 선택하고,
        소스코드 관리에서 Git 을 누르고, Repository URL 에, 본인의 레포지토리의 clone with https 주소를 넣어주세요.
        프라이빗 레포지토리라면, 액세스 불가라는 에러가 날 것인데,

        Credentials 에서 Add 를 눌러,
        kind : username with password
        username : github nickname(깃랩에서 프로필을 누르고 나온 아이디 중 @ 뒤에 오는 아이디)
        password : 앞서 발급받은 access token
        위와 같이 입력하고 Add 한 후, 생성된 계정 정보를 선택하면 에러가 사라질 것입니다.

        branch to build 에 branch specifier 에는 */prod 라고 하여,
        dev 브랜치에 오는 이벤트만 관여하겠다고 설정함으로써,
        추후 다른 브랜치가 아니라 prod 브랜치에 push 가 오면 개발 서버 빌드를 하도록 처리할 것입니다.

        빌드 유발에는 Build when a change is pushed to Gitlab... 을 선택해서,
        깃랩 프로젝트에 push 되면 webhook 이 발생하는 시점에 작업이 실행되도록 설정합니다.

        이 항목을 누르면 나오는 아래 정보에서,
        enabled gitlab triggers 는 push events 를 제외하고는 모두 체크 해제하고,
        고급 버튼을 눌러,
        아래의 Secret Token 에서, Generate 버튼을 누르면 웹훅용 시크릿 토큰이 나오는데,
        일단 메모장에 복사해주세요.

        일단 여기까지만 하고 저장을 누릅니다.

    3. 깃허브 프로젝트의 웹훅을 설정합니다.
        Jenkins와 web hook으로 연결하고 싶은 프로젝트의 깃랩 레포지토리에 들어가서,
        settings 의 webhooks 탭에 들어가,
        add new webhook 을 누릅니다.
        URL 에는
        {젠킨스 접속 주소 및 포트번호}/project/{아이템 이름}
        이런 형식으로 입력하고,
        name 에는 아이템 이름과 동일하게 입력하고,
        secret token 에는 앞서 복사해둔 웹훅 시크릿 토큰을 붙여넣어줍니다.

        trigger 는 push events 를 누르고, wildcard pattern 에 prod 를 입력해서,
        prod 브랜치에 push 가 왔을 때만 웹훅을 실행하도록 설정합니다.
        Add Webhook 을 한 후, test 를 하면 되는데,

        여기서, 젠킨스 서버의 인바운드에서 webhook 신호를 보내는 gitlab ip 를 차단중이기에,
        EC2 보안 설정에서 Gitlab ip 를 허용해야 합니다.

        https://docs.gitlab.com/ee/user/gitlab_com/#gitlabcom-ip-addresses

        위 링크에서 IP range 를 확인하세요.
        지금은 34.74.90.64/28 와 34.74.226.0/24 를 허용했습니다.

        IP 허용 후 test 를 눌렀을 때, 이상이 없으며, 젠킨스로 이동했을 때, 해당 아이템이 작업이 진행되면 됩니다.

        아직 prod 브랜치가 없으므로, 에러 표시가 뜰 것이지만, 어쨌든 아이템이 실행되었다가 바로 종료되는 것을 확인했다면,
        앞으로 해당 프로젝트의 prod 서버에 push 를 올리면 작업이 실행될 것입니다.

        이를 확인하기 위하여, 준비된 프로젝트에서 작은 변경을 준 후, prod 브랜치에 push 를 해보세요.
        작업 실행이 잘 이루어졌다면 앞으로 각 브랜치에 push 를 하는 것만으로 빌드 작업이 이루어지는 것입니다.

    4. 트리거 작업을 완료했습니다.
        이제 테스트 및 빌드 작업을 자동화할 것입니다.

        먼저, 프로젝트 빌드 테스트시 필요하므로 데이터베이스 보안 설정에서 인바운드 설정에 젠킨스 접근이 가능하도록 설정해주세요.

        동일 VPN 내의 데이터베이스인 경우에는,
        외부에서 접근하기 위한 퍼블릭 IP 를 허용하는 것이 아니라,
        내부의 프라이빗 IP 를 허용하는 것을 주의하세요.

        동일하게 서버 인스턴스에서 22 번 포트 역시 젠킨스 접근이 가능하도록 오픈해주세요.

        Build Steps 에 Add build step 을 누르고, Execute shell 을 누릅니다.
        Build Steps 는 트리거가 발동하여 빌드가 진행될 때 어떤 작업을 수행할지에 대한 설정을 하는 곳으로,
        위에서부터 아래로 순서대로 작업이 수행됩니다.
        Execute shell 은, jenkins 가 실행되는 OS 의 커맨드창에 명령어를 내리는 것으로,
        이 안에 명령어를 한줄씩 써나가면 해당 명령어가 실행되는 것입니다.


        chmod +x ./gradlew
        ./gradlew build
        docker image build --pull=true -f "./external_files/docker/server_docker/Dockerfile-Server-Prod" -t raillylinker/server_prod:latest .
        docker save -o "./external_files/docker/server_docker/server_prod.tar" raillylinker/server_prod:latest
        scp -o "StrictHostKeyChecking=no" -i /var/jenkins_home/ssh_keys/petlogon-developer.pem ./external_files/docker/server_docker/server_prod.tar ubuntu@{서버주소}:/home/ubuntu/prod
        rm ./external_files/docker/server_docker/server_prod.tar
        docker container prune -f
        docker volume prune -f
        docker image prune -f
        docker network prune -f
        docker system prune -f


        위와 같이 입력해주세요.

        설명하자면,
        첫번째, 두번째 줄은, Springboot 프로젝트를 빌드해서 jar 파일을 만드는 것이고,
        세번째 줄은, external_files/docker/server_docker 안의 도커 파일로 도커 이미지 빌드를 하는 것이며,
        네번째 줄은, 이미지를 파일로 저장하는 것이고,
        다섯번째 줄은, 만들어진 도커 이미지를, 배포올릴 서비스 서버에 전달하는 것입니다.
        나머지 줄은 필요없는 도커 정보를 제거하여 용량 낭비를 줄여주는 기능입니다.
        {서버주소} 부분은 앞서 설명하였듯, 같은 VPC 내라면 프라이빗 IP 를 적어야 하는 것을 주의합시다.

        이렇게 하면 Jenkins 로컬 부분에서 Springboot test / build 가 완료된 것이고,
        이렇게 생성된 도커 이미지 파일을 서비스 서버에 전달한 것입니다.

        이제 이 파일을 서비스 서버 내에서 실행시키도록 하면 됩니다.

    5. jenkins 에서 서비스 서버에 명령을 내리려면 SSH 를 사용해야 합니다.

        빌드 후 조치를 선택하고 send build artifacts over SSH를 선택합니다.

        SSH Server 는 앞서 작성했던 배포 서버의 SSH 정보를 선택하고,

        Exec Command 에,

        sudo docker container stop server_prod
        sudo docker load -i /home/ubuntu/prod/server_prod.tar
        sudo docker container run -v /home/ubuntu/prod/by_product_files:/app/by_product_files -d -e TZ=Asia/Seoul --rm -p80:80 --name server_prod raillylinker/server_prod:latest
        sudo docker container prune -f
        sudo docker volume prune -f
        sudo docker image prune -f
        sudo docker network prune -f
        sudo docker system prune -f

        이렇게 입력하고

        저장 버튼을 누르면 젠킨스 설정 완료입니다.

- 위와 같이 처리가 완료되었다면 빌드 배포 자동화가 완료된 것입니다.
    이제는 git repository 에 push 를 올리기만 하면 젠킨스가 자동으로 테스트 - 빌드 - 배포까지 수행해주므로,
    실제로 프로젝트를 수정해보고, dev, prod 브랜치에 push 를 하여 배포가 완료되는지를 확인해보세요.