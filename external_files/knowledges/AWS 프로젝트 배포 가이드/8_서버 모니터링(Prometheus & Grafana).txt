[서버 모니터링(Prometheus & Grafana)]
- 서버가 준비되었다면 서버 상태를 확인하는 툴을 준비해야 해당 서버에 장애가 없는지 확인이 편합니다.
    모니터링 툴을 하나 만들어두어 활용한다면, 앞으로 어떤 서비스를 만들건 재활용하여 사용이 가능합니다.
    여기서는 Springboot Actuator 를 사용하여 서버 상태를 파악하는 Prometheus 와,
    Prometheus 에서 반환해주는 정보를 보다 알기 쉬운 형태로 보여주는 Grafana 툴을 활용하여 모니터링 툴을 구성하겠습니다.

- 진행
    1. AWS EC2 인스턴스는 기존에 젠킨스를 준비할 때 만든 인스턴스를 재활용 할 것입니다.

    2. 커맨드 창을 띄우고, 인스턴스에 접속한 후,
        >> mkdir monitoring
        위와 같이 폴더를 만들어 줍니다.

    3. 이제까지의 방식대로 docker 를 설치했다면, EC2 인스턴스 내의 도커에서 docker compose 를 사용 못할수도 있습니다.
        고로, 로컬에서 이미지를 만들어 파일로 저장 후, 해당 파일을 전달하여 실행시킬 것입니다.

        external_files/docker/prometheus_and_grafana_docker/명령어.txt 파일에 적힌 설명에서 컨테이너 실행 부분까지만 진행하여 이미지 빌드가 정상 동작되는지 확인하고,

        >> docker container ps

        로 현재 실행중인 컨테이너의 이미지를 확인합니다.

        CONTAINER ID   IMAGE                    COMMAND                   CREATED          STATUS          PORTS                    NAMES
        fe12ef720cab   grafana/grafana:latest   "/run.sh"                 21 seconds ago   Up 19 seconds   0.0.0.0:3000->3000/tcp   grafana
        350ee750cf40   prom/prometheus:latest   "/bin/prometheus --c…"   21 seconds ago   Up 19 seconds   0.0.0.0:9090->9090/tcp   prometheus

        저는 위와 같은데, IMAGE 부분을 보면 됩니다.

        >> docker save -o "{저장할 경로}\grafana.tar" grafana/grafana:latest
        >> docker save -o "{저장할 경로}\prometheus.tar" prom/prometheus:latest

        위와 같은 명령어로 빌드된 이미지를 파일로 저장합니다.

    4. 이제 위 파일들을 서버의 monitoring 폴더로 카피할 것입니다.

        >> scp -i "{pem 키 파일}" "{저장된 경로}\grafana.tar" {아이디@전송할 서버주소}:/home/ubuntu/monitoring
        >> scp -i "{pem 키 파일}" "{저장된 경로}\prometheus.tar" {아이디@전송할 서버주소}:/home/ubuntu/monitoring

        위와 같은 명령어로 이동시켜주고,

        컨테이너 빌드에 필요한 prometheus.yml 파일 역시

        >> scp -i "{pem 키 파일}" "{저장된 경로}\prometheus.yml" {아이디@전송할 서버주소}:/home/ubuntu/monitoring

        로 이동시켜줍니다.

    5. EC2 인스턴스 커맨드창에서,
        >> sudo docker load -i "/home/ubuntu/monitoring/grafana.tar"
        >> sudo docker load -i "/home/ubuntu/monitoring/prometheus.tar"

        로 각 이미지를 load 해주세요.

    6. 각 이미지를 컨테이너로 실행시켜줍니다.
        >> sudo docker network create monitoring-network
        >> sudo docker run -d --name prometheus --network monitoring-network -p 9090:9090 -v /home/ubuntu/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus:latest --config.file=/etc/prometheus/prometheus.yml
        >> sudo docker run -d --name grafana --network monitoring-network -p 3000:3000 grafana/grafana:latest

        EC2 인스턴스의 보안 인바운드 설정에서 각 포트에 대한 접근 IP 설정을 해주고,
        각 서비스에 접근하여 동작을 확인하면 됩니다.

    7. 앞으로 남은 것은 Grafana 와 Springboot 설정 등이 있습니다.
        external_files/docker/prometheus_and_grafana_docker/명령어.txt 파일에 적힌 설명대로 진행하세요.
        (데이터소스 설정시, prometheus 접근 주소는, http://prometheus:9090 이런식으로 해야합니다.)

        앞으로 관리해야 할 점으로는,
        모니터링할 서비스 서버가 늘어가면,
        prometheus.yml 파일 안의 targets 의 리스트에 모니터링할 서버의 IP 주소를 추가해나가면 됩니다.

        >> sudo docker restart prometheus

        추가 후에는 위와 같이 도커 재시작을 해주고,
        http://127.0.0.1:9090/targets
        위와 같이 접근하여 확인하면 좋습니다.

    8. 마지막으로 문서화를 하겠습니다.
        앞서 젠킨스 설명에서 만든 설명 파일을 열어서,

        [developer-tools]
        - 이 EC2 서버는 개발자 툴을 위한 서버입니다.

        키페어 파일 : developer.pem
        OS : Ubuntu Server 24.04 LTS (HVM) - (t2.small)
        접속 ip :
        Vpc :
        프라이빗 IP :
        OpenSSH 접속 명령어 : ssh -i "developer.pem" ubuntu@

        (Jenkins)
        포트 : 8082
        admin pw :
        user id :
        user pw :

        (Prometheus)
        포트 : 9090

        (Grafana)
        포트 : 3000
        아이디 :
        비밀번호 :

        이렇게 입력하면 됩니다.