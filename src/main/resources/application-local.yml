# (실행 환경 local 설정)
# : 로컬 환경 개발자를 위한 환경 설정 = 서버 개발자가 마음껏 사용 가능 (그냥 IDE 를 실행하면 적용)

spring:
  config:
    activate: # 프로필명 설정
      on-profile: local

  servlet:
    multipart:
      # !!!multipart 데이터량 설정!!!
      maxFileSize: 50MB
      maxRequestSize: 50MB

cloud:
  aws:
    credentials:
      access-key: InputYourAccessKey
      secret-key: InputYourSecretKey
    region:
      static: ap-northeast-2
    stack:
      auto: false

springdoc:
  swagger-ui:
    enabled: true # Swagger 문서 공개 여부

# Kafka Cluster 설정
kafka-cluster:
  # Kafka 추가
  # 작명법은, 앞에 kafka{index}-{제목} 형식으로 하여, 충돌을 피하기

  # (주 사용 Kafka)
  kafka1-main:
    # Kafka 브로커에 연결하기 위한 주소를 설정합니다. 여러 개의 브로커가 있을 경우, 콤마로 구분하여 나열합니다.
    uri: localhost:9092,localhost:9093,localhost:9094

    # Consumer용 인증 정보
    consumer:
      username: admin
      password: admin-secret

    # Producer용 인증 정보
    producer:
      username: admin
      password: admin-secret

# JPA DataSource 설정
datasource:
  # Database 추가
  # 작명법은, 앞에 db{index}-{제목} 형식으로 하여, datasource 별 충돌을 피하기

  # (서비스 데이터베이스)
  db1-main: # DB 추가
    # 데이터베이스 접속 경로
    # !!!serverTimezone 설정을 데이터베이스의 타임존 설정과 일치시켜주세요.!!!
    # 로컬 DB 접속은 localhost 를 사용하고, 도커에서 로컬 DB 접속시엔 host.docker.internal 를 사용하세요.
    jdbcUrl: jdbc:mysql://localhost:3306/first_schema?useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8&serverTimezone=Asia/Seoul&zeroDateTimeBehavior=convertToNull&autoReconnect=true
    # 데이터베이스의 사용자명
    username: root
    # 데이터베이스의 패스워드
    password: todo1234!
    # 데이터베이스 접속시 사용하는 드라이버
    driverClassName: com.mysql.cj.jdbc.Driver
    data: classpath:sql/data-h2.sql
    initialization-mode: always
    database-platform: org.hibernate.dialect.MySQLDialect

# Redis DataSource 설정
datasource-redis:
  # Redis 추가
  # 작명법은, 앞에 redis{index}-{제목} 형식으로 하기(다른 datasource 설정과의 통일성을 위해)

  # (주 사용 Redis)
  redis1-main:
    node-list: 127.0.0.1:7001, 127.0.0.1:7002, 127.0.0.1:7003, 127.0.0.1:7101, 127.0.0.1:7102, 127.0.0.1:7103

# MongoDB DataSource 설정
datasource-mongodb:
  # MongoDB 추가
  # 작명법은, 앞에 md{index}-{제목} 형식으로 하여, datasource 별 충돌을 피하기

  # (주 사용 MongoDB)
  # mongodb:// 뒤에 인증 아이디 : 인증 비밀번호를 넣어주고, @ 뒤에는 레플리카 접속 주소를 모두 넣어주며,
  # ? 뒤의 replicaSet 은 레플리카 셋 이름을, authSource 는 사용자 정보가 저장된 데이터베이스를 설정하면 됩니다.
  mdb1-main:
    uri: mongodb://root:todo1234!@127.0.0.1:27017,127.0.0.1:27018,127.0.0.1:27019/db?replicaSet=rs0&authSource=admin

logging:
  level:
    org.springframework.data.mongodb: INFO # mongoDB 로깅 설정

custom-config: # 프로젝트 내에서 사용하는 커스텀 설정
  naverSms: # Naver SMS 설정
    access-key: InputYourAccessKey
    secret-key: InputYourSecretKey
    service-id: ncp:sms:kr:test:test
    phone-number: test
    alim-talk-service-id: ncp:kkobizmsg:kr:test:test

  smtp: # SMTP 설정
    host: smtp.gmail.com # SMTP 호스트
    port: 587 # SMTP 포트
    sender-name: InputYourEmailId@test.com # SMTP 계정 아이디
    sender-password: InputYourSenderPassword # SMTP 계정 비밀번호
    time-out-millis: 10000 # 타임아웃 밀리초